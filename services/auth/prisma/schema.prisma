// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role{
  ADMIN
  USER
}

enum AccountStatus{
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}


model Auth {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  role          Role            @default(USER)
  status        AccountStatus   @default(PENDING)
  verified      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  loginHistories  LoginHistory[]
  verificationCodes  VerificationCode[]
}
enum LoginAttempt{
  SUCCESS
  FAILED
}
model LoginHistory {
  id          String        @id @default(cuid())
  authId      String
  auth        Auth          @relation(fields: [authId], references: [id], onDelete: Cascade)
  ipAddress   String?
  userAgent   String?
  attempt     LoginAttempt  @default(SUCCESS)
  loginAt     DateTime      @default(now())
}

enum VerificationCodeStatus{
  PENDING
  USED
  EXPIRED
}


enum VerificationCodeType{
  ACCOUNT_ACTIVATION
  PASSWORD_RESET
  EMAIL_CHANGE
  PHONE_CHANGE
  TWO_FACTOR_AUTH
  TWO_FACTOR_AUTH_DISABLE
}

model VerificationCode {
  id          String                  @id @default(cuid())
  authId      String
  auth        Auth                    @relation(fields: [authId], references: [id], onDelete: Cascade)
  status      VerificationCodeStatus  @default(PENDING)
  code        String
  type        VerificationCodeType    @default(ACCOUNT_ACTIVATION)
  issuedAt    DateTime                @default(now())
  expiresAt   DateTime
  verifiedAt  DateTime?
}